@page "/fileupload"

@using Client.Services;
@using global::Shared.Entities;
@using global::Shared.Dtos;

@implements IAsyncDisposable;
@inject IJSRuntime JSRuntime;
@inject ISubjectService SubjectService;
@inject IGradeService GradeService;
@inject NavigationManager NavigationManager;

<h3>Upload your code as a file!</h3>

<EditForm Model="@gradeKeyPost">
    <InputText id="name" @bind-Value="gradeKeyPost.Name" />

    <InputSelect id="subject" @bind-Value="gradeKeyPost.SubjectId">
        @foreach (var item in @SubjectService.Subjects)
        {
            <option value="@item.Id"> @item.Name </option>
        }
    </InputSelect>

    <CheckBoxList Data="@GradeService.Schooclasses" TextField="@((item)=>item.Name)" ValueField="@((item)=>item.Name)"
        SelectedValues="@SelectedSchoolClasses" />

    <div @ref="fileDropContainer" class="file-drop-zone @HoverClass" @ondragenter="OnDragEnter"
        @ondragleave="OnDragLeave" @ondragover="OnDragEnter">
        <InputFile OnChange="@OnChange" multiple />
    </div>

    <div class="error-message-container">
        <p>@ErrorMessage</p>
    </div>

    <div>
        <button type="submit" @onclick="AddGradeKeyAsync">
            Upload Code
        </button>
    </div>
    
</EditForm>

@code
{
    protected List<string> SelectedSchoolClasses = new List<string>();
    private string HoverClass = string.Empty;
    void OnDragEnter(DragEventArgs e) => HoverClass = "hover";
    void OnDragLeave(DragEventArgs e) => HoverClass = string.Empty;
    IJSObjectReference? _filePasteModule = default(IJSObjectReference);
    IJSObjectReference? _filePasteFunctionReference = default(IJSObjectReference);
    ElementReference fileDropContainer;
    IBrowserFile? file;
    ScriptType scriptType;
    string stringCode = string.Empty;
    private string ErrorMessage = string.Empty;
    private const int maxAllowedFiles = 1;
    private int _userId = 1;
    private GradeKeyPostDto gradeKeyPost = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await SubjectService.GetSubjectsByTeacherAsync(_userId);
            await GradeService.GetSchoolclassesByTeacherAndSubjectAsync(_userId, SubjectService.Subjects.First().Id);
            await GradeService.GetAllKindsAsync();
            gradeKeyPost.SubjectId = SubjectService.Subjects.First().Id;
        }

        catch (Exception)
        {
            throw;
        }
    }
    private async Task AddGradeKeyAsync()
    {
        if (stringCode == string.Empty)
        {
            ErrorMessage = "Script is needed!";
        }
        var sc = GradeService.Schooclasses.SingleOrDefault(s => s.Name == SelectedSchoolClasses.First());

        var kinds = GradeService.Kinds.Select(k => k.Name).ToList();
        gradeKeyPost.Calculation = stringCode;
        gradeKeyPost.SchoolClasses = SelectedSchoolClasses;
        gradeKeyPost.ScriptType = scriptType;
        gradeKeyPost.UsedKinds = kinds;
        gradeKeyPost.TeacherId = _userId;
        
        await GradeService.CreateGradeKeyAsync(gradeKeyPost);

        //await GradeService.CalcGradesForClass(sc!.Id, _userId);

        NavigationManager.NavigateTo($"/calculation");
    }

    public async ValueTask DisposeAsync()
    {
        if (_filePasteFunctionReference != null)
        {
            await _filePasteFunctionReference.InvokeVoidAsync("dispose");
            await _filePasteFunctionReference.DisposeAsync();
        }
        if (_filePasteModule != null)
        {
            await _filePasteModule.DisposeAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _filePasteModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/filePaste.js");
            _filePasteFunctionReference = await _filePasteModule.InvokeAsync<IJSObjectReference>("initializeFilePaste",
            fileDropContainer, file);
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        stringCode = string.Empty;
        ErrorMessage = string.Empty;

        using var content = new MultipartFormDataContent();

        if (e.FileCount > maxAllowedFiles)
        {
            ErrorMessage = $"Only {maxAllowedFiles} files can be uploaded";
            return;
        }


        foreach (var file in e.GetMultipleFiles())
        {
            var isAllowed = false;
            var fileContent = new StreamContent(file.OpenReadStream());
            var info = new FileInfo(file.Name);

            switch (info.Extension)
            {
                case ".lua":
                    scriptType = ScriptType.Lua;
                    isAllowed = true;
                    break;
                case ".py":
                    scriptType = ScriptType.Python;
                    isAllowed = true;
                    break;
                case ".csc":
                    scriptType = ScriptType.CSharpScript;
                    isAllowed = true;
                    break;
                case ".js":
                    isAllowed = true;
                    scriptType = ScriptType.JavaScript;
                    break;
                default:
                    ErrorMessage = "Content Type not sopported";
                    break;
            }

            if (isAllowed)
            {
                stringCode = await fileContent.ReadAsStringAsync();
            }
        }
    }
}


